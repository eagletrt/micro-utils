#!/usr/bin/env ruby

# frozen_string_literal: true

require 'master_logger'
require 'error_gen'
require 'optparse'

# Setup logger
ErrorGen::MasterLogger.setup

generator = ErrorGen::Generator.new

op = OptionParser.new do |parser|
  parser.banner = <<~BANNER
    Error utilities generator for embedded systems
    Version #{ErrorGen::VERSION}

    Usage: error_gen [options] errors.json
  BANNER

  parser.on('-o', '--output NAME', 'Specify basename for the generated source files') do |filename|
    generator.target_name = filename
  end

  parser.on('-x', '--prefix PREFIX', 'Specify the prefix to use inside the generate code') do |prefix|
    generator.prefix = prefix
  end

  parser.on('-h', '--help', 'Display this help and exit') do
    puts parser
    exit
  end

  parser.on('-v', '--version', 'Output version information and exit') do
    puts "#{File.basename($PROGRAM_NAME, File.extname($PROGRAM_NAME))} #{ErrorGen::VERSION}"
    exit
  end
end

op.parse!

# Check input file
unless ARGV[0]
  ErrorGen::MasterLogger.error('missing file path')
  warn op
  exit 1
end
unless File.exist? ARGV[0]
  ErrorGen::MasterLogger.error("#{ARGV[0]} does not exists")
  warn op
  exit 2
end
if File.extname(ARGV[0]) != '.json'
  ErrorGen::MasterLogger.error("#{ARGV[0]} is not a JSON file")
  warn op
  exit 3
end

# Parse file
unless generator.parse(ARGV[0])
  ErrorGen::MasterLogger.error("unable to parse #{ARGV[0]}: #{generator.ret_msg}")
  exit 4
end

ErrorGen::MasterLogger.info('generating header file...')
unless generator.generate_h
  ErrorGen::MasterLogger.error("unable to generate the header file: #{generator.ret_msg}")
  exit 5
end
ErrorGen::MasterLogger.info('header file generated correctly')

ErrorGen::MasterLogger.info('generating source file...')
unless generator.generate_c
  ErrorGen::MasterLogger.error("unable to generate the source file: #{generator.ret_msg}")
  exit 6
end
ErrorGen::MasterLogger.info('source file generated correctly')
